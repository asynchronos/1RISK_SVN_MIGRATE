'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization

Namespace webservice.linq
	
    '<System.Data.Linq.Mapping.DatabaseAttribute(Name:="BAY01")> _
    Partial Public Class BusinessTypeLinqDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertBUSI_TYPE3(ByVal instance As BUSI_TYPE3)
        End Sub
        Partial Private Sub UpdateBUSI_TYPE3(ByVal instance As BUSI_TYPE3)
        End Sub
        Partial Private Sub DeleteBUSI_TYPE3(ByVal instance As BUSI_TYPE3)
        End Sub
        Partial Private Sub InsertBUSI_TYPE2(ByVal instance As BUSI_TYPE2)
        End Sub
        Partial Private Sub UpdateBUSI_TYPE2(ByVal instance As BUSI_TYPE2)
        End Sub
        Partial Private Sub DeleteBUSI_TYPE2(ByVal instance As BUSI_TYPE2)
        End Sub
        Partial Private Sub InsertBUSI_TYPE1(ByVal instance As BUSI_TYPE1)
        End Sub
        Partial Private Sub UpdateBUSI_TYPE1(ByVal instance As BUSI_TYPE1)
        End Sub
        Partial Private Sub DeleteBUSI_TYPE1(ByVal instance As BUSI_TYPE1)
        End Sub
        Partial Private Sub InsertBUSINESS_TYPE_1(ByVal instance As BUSINESS_TYPE_1)
        End Sub
        Partial Private Sub UpdateBUSINESS_TYPE_1(ByVal instance As BUSINESS_TYPE_1)
        End Sub
        Partial Private Sub DeleteBUSINESS_TYPE_1(ByVal instance As BUSINESS_TYPE_1)
        End Sub
        Partial Private Sub InsertBUSINESS_TYPE_2(ByVal instance As BUSINESS_TYPE_2)
        End Sub
        Partial Private Sub UpdateBUSINESS_TYPE_2(ByVal instance As BUSINESS_TYPE_2)
        End Sub
        Partial Private Sub DeleteBUSINESS_TYPE_2(ByVal instance As BUSINESS_TYPE_2)
        End Sub
        Partial Private Sub InsertBUSINESS_TYPE_3(ByVal instance As BUSINESS_TYPE_3)
        End Sub
        Partial Private Sub UpdateBUSINESS_TYPE_3(ByVal instance As BUSINESS_TYPE_3)
        End Sub
        Partial Private Sub DeleteBUSINESS_TYPE_3(ByVal instance As BUSINESS_TYPE_3)
        End Sub
        Partial Private Sub InsertBUSINESS_TYPE_4(ByVal instance As BUSINESS_TYPE_4)
        End Sub
        Partial Private Sub UpdateBUSINESS_TYPE_4(ByVal instance As BUSINESS_TYPE_4)
        End Sub
        Partial Private Sub DeleteBUSINESS_TYPE_4(ByVal instance As BUSINESS_TYPE_4)
        End Sub
#End Region

        Public Sub New()
            MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BAY01ConnectionString").ConnectionString, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property BUSI_TYPE3s() As System.Data.Linq.Table(Of BUSI_TYPE3)
            Get
                Return Me.GetTable(Of BUSI_TYPE3)()
            End Get
        End Property

        Public ReadOnly Property BUSI_TYPE2s() As System.Data.Linq.Table(Of BUSI_TYPE2)
            Get
                Return Me.GetTable(Of BUSI_TYPE2)()
            End Get
        End Property

        Public ReadOnly Property BUSI_TYPE1s() As System.Data.Linq.Table(Of BUSI_TYPE1)
            Get
                Return Me.GetTable(Of BUSI_TYPE1)()
            End Get
        End Property

        Public ReadOnly Property BUSINESS_TYPE_1s() As System.Data.Linq.Table(Of BUSINESS_TYPE_1)
            Get
                Return Me.GetTable(Of BUSINESS_TYPE_1)()
            End Get
        End Property

        Public ReadOnly Property BUSINESS_TYPE_2s() As System.Data.Linq.Table(Of BUSINESS_TYPE_2)
            Get
                Return Me.GetTable(Of BUSINESS_TYPE_2)()
            End Get
        End Property

        Public ReadOnly Property BUSINESS_TYPE_3s() As System.Data.Linq.Table(Of BUSINESS_TYPE_3)
            Get
                Return Me.GetTable(Of BUSINESS_TYPE_3)()
            End Get
        End Property

        Public ReadOnly Property BUSINESS_TYPE_4s() As System.Data.Linq.Table(Of BUSINESS_TYPE_4)
            Get
                Return Me.GetTable(Of BUSINESS_TYPE_4)()
            End Get
        End Property
    End Class
	
	<Table(Name:="dbo.BUSI_TYPE3"),  _
	 DataContract()>  _
	Partial Public Class BUSI_TYPE3
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE3_ID As Integer
		
		Private _TYPE3_DETAIL As String
		
		Private _PRIORITY As Integer
		
		Private _TYPE2_ID As Integer
		
		Private _CODE_BAY As System.Nullable(Of Integer)
		
		Private _CODE_RESEARCH As System.Nullable(Of Integer)
		
		Private _FLAG As System.Nullable(Of Char)
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSI_TYPE2s As EntitySet(Of BUSI_TYPE2)
		
		Private serializing As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE3_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTYPE3_IDChanged()
    End Sub
    Partial Private Sub OnTYPE3_DETAILChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE3_DETAILChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnTYPE2_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTYPE2_IDChanged()
    End Sub
    Partial Private Sub OnCODE_BAYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCODE_BAYChanged()
    End Sub
    Partial Private Sub OnCODE_RESEARCHChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCODE_RESEARCHChanged()
    End Sub
    Partial Private Sub OnFLAGChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnFLAGChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE3_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE3_ID() As Integer
			Get
				Return Me._TYPE3_ID
			End Get
			Set
				If ((Me._TYPE3_ID = value)  _
							= false) Then
					Me.OnTYPE3_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE3_ID = value
					Me.SendPropertyChanged("TYPE3_ID")
					Me.OnTYPE3_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE3_DETAIL", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property TYPE3_DETAIL() As String
			Get
				Return Me._TYPE3_DETAIL
			End Get
			Set
				If (String.Equals(Me._TYPE3_DETAIL, value) = false) Then
					Me.OnTYPE3_DETAILChanging(value)
					Me.SendPropertyChanging
					Me._TYPE3_DETAIL = value
					Me.SendPropertyChanged("TYPE3_DETAIL")
					Me.OnTYPE3_DETAILChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=3)>  _
		Public Property PRIORITY() As Integer
			Get
				Return Me._PRIORITY
			End Get
			Set
				If ((Me._PRIORITY = value)  _
							= false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE2_ID", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=4)>  _
		Public Property TYPE2_ID() As Integer
			Get
				Return Me._TYPE2_ID
			End Get
			Set
				If ((Me._TYPE2_ID = value)  _
							= false) Then
					Me.OnTYPE2_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE2_ID = value
					Me.SendPropertyChanged("TYPE2_ID")
					Me.OnTYPE2_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_CODE_BAY", DbType:="Int"),  _
		 DataMember(Order:=5)>  _
		Public Property CODE_BAY() As System.Nullable(Of Integer)
			Get
				Return Me._CODE_BAY
			End Get
			Set
				If (Me._CODE_BAY.Equals(value) = false) Then
					Me.OnCODE_BAYChanging(value)
					Me.SendPropertyChanging
					Me._CODE_BAY = value
					Me.SendPropertyChanged("CODE_BAY")
					Me.OnCODE_BAYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_CODE_RESEARCH", DbType:="Int"),  _
		 DataMember(Order:=6)>  _
		Public Property CODE_RESEARCH() As System.Nullable(Of Integer)
			Get
				Return Me._CODE_RESEARCH
			End Get
			Set
				If (Me._CODE_RESEARCH.Equals(value) = false) Then
					Me.OnCODE_RESEARCHChanging(value)
					Me.SendPropertyChanging
					Me._CODE_RESEARCH = value
					Me.SendPropertyChanged("CODE_RESEARCH")
					Me.OnCODE_RESEARCHChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_FLAG", DbType:="NChar(1)"),  _
		 DataMember(Order:=7)>  _
		Public Property FLAG() As System.Nullable(Of Char)
			Get
				Return Me._FLAG
			End Get
			Set
				If (Me._FLAG.Equals(value) = false) Then
					Me.OnFLAGChanging(value)
					Me.SendPropertyChanging
					Me._FLAG = value
					Me.SendPropertyChanged("FLAG")
					Me.OnFLAGChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=8)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=9)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSI_TYPE3_BUSI_TYPE2", Storage:="_BUSI_TYPE2s", ThisKey:="TYPE2_ID", OtherKey:="TYPE2_ID"),  _
		 DataMember(Order:=10, EmitDefaultValue:=false)>  _
		Public Property BUSI_TYPE2s() As EntitySet(Of BUSI_TYPE2)
			Get
				If (Me.serializing  _
							AndAlso (Me._BUSI_TYPE2s.HasLoadedOrAssignedValues = false)) Then
					Return Nothing
				End If
				Return Me._BUSI_TYPE2s
			End Get
			Set
				Me._BUSI_TYPE2s.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_BUSI_TYPE2s(ByVal entity As BUSI_TYPE2)
			Me.SendPropertyChanging
			entity.BUSI_TYPE3 = Me
		End Sub
		
		Private Sub detach_BUSI_TYPE2s(ByVal entity As BUSI_TYPE2)
			Me.SendPropertyChanging
			entity.BUSI_TYPE3 = Nothing
		End Sub
		
		Private Sub Initialize()
			Me._BUSI_TYPE2s = New EntitySet(Of BUSI_TYPE2)(AddressOf Me.attach_BUSI_TYPE2s, AddressOf Me.detach_BUSI_TYPE2s)
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
		
		<OnSerializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerializing(ByVal context As StreamingContext)
			Me.serializing = true
		End Sub
		
		<OnSerialized(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerialized(ByVal context As StreamingContext)
			Me.serializing = false
		End Sub
	End Class
	
	<Table(Name:="dbo.BUSI_TYPE2"),  _
	 DataContract()>  _
	Partial Public Class BUSI_TYPE2
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE2_ID As Integer
		
		Private _TYPE2_DETAIL As String
		
		Private _PRIORITY As Integer
		
		Private _TYPE1_ID As Integer
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSI_TYPE1s As EntitySet(Of BUSI_TYPE1)
		
		Private _BUSI_TYPE3 As EntityRef(Of BUSI_TYPE3)
		
		Private serializing As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE2_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTYPE2_IDChanged()
    End Sub
    Partial Private Sub OnTYPE2_DETAILChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE2_DETAILChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnTYPE1_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTYPE1_IDChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE2_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE2_ID() As Integer
			Get
				Return Me._TYPE2_ID
			End Get
			Set
				If ((Me._TYPE2_ID = value)  _
							= false) Then
					If Me._BUSI_TYPE3.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnTYPE2_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE2_ID = value
					Me.SendPropertyChanged("TYPE2_ID")
					Me.OnTYPE2_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE2_DETAIL", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property TYPE2_DETAIL() As String
			Get
				Return Me._TYPE2_DETAIL
			End Get
			Set
				If (String.Equals(Me._TYPE2_DETAIL, value) = false) Then
					Me.OnTYPE2_DETAILChanging(value)
					Me.SendPropertyChanging
					Me._TYPE2_DETAIL = value
					Me.SendPropertyChanged("TYPE2_DETAIL")
					Me.OnTYPE2_DETAILChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=3)>  _
		Public Property PRIORITY() As Integer
			Get
				Return Me._PRIORITY
			End Get
			Set
				If ((Me._PRIORITY = value)  _
							= false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE1_ID", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=4)>  _
		Public Property TYPE1_ID() As Integer
			Get
				Return Me._TYPE1_ID
			End Get
			Set
				If ((Me._TYPE1_ID = value)  _
							= false) Then
					Me.OnTYPE1_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE1_ID = value
					Me.SendPropertyChanged("TYPE1_ID")
					Me.OnTYPE1_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=5)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=6)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSI_TYPE2_BUSI_TYPE1", Storage:="_BUSI_TYPE1s", ThisKey:="TYPE1_ID", OtherKey:="TYPE1_ID"),  _
		 DataMember(Order:=7, EmitDefaultValue:=false)>  _
		Public Property BUSI_TYPE1s() As EntitySet(Of BUSI_TYPE1)
			Get
				If (Me.serializing  _
							AndAlso (Me._BUSI_TYPE1s.HasLoadedOrAssignedValues = false)) Then
					Return Nothing
				End If
				Return Me._BUSI_TYPE1s
			End Get
			Set
				Me._BUSI_TYPE1s.Assign(value)
			End Set
		End Property
		
		<Association(Name:="BUSI_TYPE3_BUSI_TYPE2", Storage:="_BUSI_TYPE3", ThisKey:="TYPE2_ID", OtherKey:="TYPE2_ID", IsForeignKey:=true)>  _
		Public Property BUSI_TYPE3() As BUSI_TYPE3
			Get
				Return Me._BUSI_TYPE3.Entity
			End Get
			Set
				Dim previousValue As BUSI_TYPE3 = Me._BUSI_TYPE3.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BUSI_TYPE3.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BUSI_TYPE3.Entity = Nothing
						previousValue.BUSI_TYPE2s.Remove(Me)
					End If
					Me._BUSI_TYPE3.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BUSI_TYPE2s.Add(Me)
						Me._TYPE2_ID = value.TYPE2_ID
					Else
						Me._TYPE2_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("BUSI_TYPE3")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_BUSI_TYPE1s(ByVal entity As BUSI_TYPE1)
			Me.SendPropertyChanging
			entity.BUSI_TYPE2 = Me
		End Sub
		
		Private Sub detach_BUSI_TYPE1s(ByVal entity As BUSI_TYPE1)
			Me.SendPropertyChanging
			entity.BUSI_TYPE2 = Nothing
		End Sub
		
		Private Sub Initialize()
			Me._BUSI_TYPE1s = New EntitySet(Of BUSI_TYPE1)(AddressOf Me.attach_BUSI_TYPE1s, AddressOf Me.detach_BUSI_TYPE1s)
			Me._BUSI_TYPE3 = CType(Nothing, EntityRef(Of BUSI_TYPE3))
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
		
		<OnSerializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerializing(ByVal context As StreamingContext)
			Me.serializing = true
		End Sub
		
		<OnSerialized(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerialized(ByVal context As StreamingContext)
			Me.serializing = false
		End Sub
	End Class
	
	<Table(Name:="dbo.BUSI_TYPE1"),  _
	 DataContract()>  _
	Partial Public Class BUSI_TYPE1
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE1_ID As Integer
		
		Private _TYPE1_DETAIL As String
		
		Private _PRIORITY As Integer
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSI_TYPE2 As EntityRef(Of BUSI_TYPE2)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE1_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTYPE1_IDChanged()
    End Sub
    Partial Private Sub OnTYPE1_DETAILChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE1_DETAILChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE1_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE1_ID() As Integer
			Get
				Return Me._TYPE1_ID
			End Get
			Set
				If ((Me._TYPE1_ID = value)  _
							= false) Then
					If Me._BUSI_TYPE2.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnTYPE1_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE1_ID = value
					Me.SendPropertyChanged("TYPE1_ID")
					Me.OnTYPE1_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE1_DETAIL", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property TYPE1_DETAIL() As String
			Get
				Return Me._TYPE1_DETAIL
			End Get
			Set
				If (String.Equals(Me._TYPE1_DETAIL, value) = false) Then
					Me.OnTYPE1_DETAILChanging(value)
					Me.SendPropertyChanging
					Me._TYPE1_DETAIL = value
					Me.SendPropertyChanged("TYPE1_DETAIL")
					Me.OnTYPE1_DETAILChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=3)>  _
		Public Property PRIORITY() As Integer
			Get
				Return Me._PRIORITY
			End Get
			Set
				If ((Me._PRIORITY = value)  _
							= false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=4)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=5)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSI_TYPE2_BUSI_TYPE1", Storage:="_BUSI_TYPE2", ThisKey:="TYPE1_ID", OtherKey:="TYPE1_ID", IsForeignKey:=true)>  _
		Public Property BUSI_TYPE2() As BUSI_TYPE2
			Get
				Return Me._BUSI_TYPE2.Entity
			End Get
			Set
				Dim previousValue As BUSI_TYPE2 = Me._BUSI_TYPE2.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BUSI_TYPE2.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BUSI_TYPE2.Entity = Nothing
						previousValue.BUSI_TYPE1s.Remove(Me)
					End If
					Me._BUSI_TYPE2.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BUSI_TYPE1s.Add(Me)
						Me._TYPE1_ID = value.TYPE1_ID
					Else
						Me._TYPE1_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("BUSI_TYPE2")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub Initialize()
			Me._BUSI_TYPE2 = CType(Nothing, EntityRef(Of BUSI_TYPE2))
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
	End Class
	
	<Table(Name:="dbo.BUSINESS_TYPE_1"),  _
	 DataContract()>  _
	Partial Public Class BUSINESS_TYPE_1
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE1_ID As String
		
		Private _RESEARCH_CODE As String
		
		Private _DESCRIPTION As String
		
		Private _DESCRIPTION_EN As String
		
		Private _NOTE As Char
		
		Private _PRIORITY As Integer
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSINESS_TYPE_2 As EntityRef(Of BUSINESS_TYPE_2)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE1_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE1_IDChanged()
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanged()
    End Sub
    Partial Private Sub OnNOTEChanging(value As Char)
    End Sub
    Partial Private Sub OnNOTEChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE1_ID", DbType:="VarChar(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE1_ID() As String
			Get
				Return Me._TYPE1_ID
			End Get
			Set
				If (String.Equals(Me._TYPE1_ID, value) = false) Then
					If Me._BUSINESS_TYPE_2.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnTYPE1_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE1_ID = value
					Me.SendPropertyChanged("TYPE1_ID")
					Me.OnTYPE1_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_RESEARCH_CODE", DbType:="VarChar(8) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property RESEARCH_CODE() As String
			Get
				Return Me._RESEARCH_CODE
			End Get
			Set
				If (String.Equals(Me._RESEARCH_CODE, value) = false) Then
					Me.OnRESEARCH_CODEChanging(value)
					Me.SendPropertyChanging
					Me._RESEARCH_CODE = value
					Me.SendPropertyChanged("RESEARCH_CODE")
					Me.OnRESEARCH_CODEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=3)>  _
		Public Property DESCRIPTION() As String
			Get
				Return Me._DESCRIPTION
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION, value) = false) Then
					Me.OnDESCRIPTIONChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION = value
					Me.SendPropertyChanged("DESCRIPTION")
					Me.OnDESCRIPTIONChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION_EN", DbType:="VarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=4)>  _
		Public Property DESCRIPTION_EN() As String
			Get
				Return Me._DESCRIPTION_EN
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION_EN, value) = false) Then
					Me.OnDESCRIPTION_ENChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION_EN = value
					Me.SendPropertyChanged("DESCRIPTION_EN")
					Me.OnDESCRIPTION_ENChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_NOTE", DbType:="Char(1) NOT NULL"),  _
		 DataMember(Order:=5)>  _
		Public Property NOTE() As Char
			Get
				Return Me._NOTE
			End Get
			Set
				If ((Me._NOTE = value)  _
							= false) Then
					Me.OnNOTEChanging(value)
					Me.SendPropertyChanging
					Me._NOTE = value
					Me.SendPropertyChanged("NOTE")
					Me.OnNOTEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=6)>  _
		Public Property PRIORITY() As Integer
			Get
				Return Me._PRIORITY
			End Get
			Set
				If ((Me._PRIORITY = value)  _
							= false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=7)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=8)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSINESS_TYPE_2_BUSINESS_TYPE_1", Storage:="_BUSINESS_TYPE_2", ThisKey:="TYPE1_ID", OtherKey:="TYPE1_ID", IsForeignKey:=true)>  _
		Public Property BUSINESS_TYPE_2() As BUSINESS_TYPE_2
			Get
				Return Me._BUSINESS_TYPE_2.Entity
			End Get
			Set
				Dim previousValue As BUSINESS_TYPE_2 = Me._BUSINESS_TYPE_2.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BUSINESS_TYPE_2.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BUSINESS_TYPE_2.Entity = Nothing
						previousValue.BUSINESS_TYPE_1s.Remove(Me)
					End If
					Me._BUSINESS_TYPE_2.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BUSINESS_TYPE_1s.Add(Me)
						Me._TYPE1_ID = value.TYPE1_ID
					Else
						Me._TYPE1_ID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("BUSINESS_TYPE_2")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub Initialize()
			Me._BUSINESS_TYPE_2 = CType(Nothing, EntityRef(Of BUSINESS_TYPE_2))
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
	End Class
	
	<Table(Name:="dbo.BUSINESS_TYPE_2"),  _
	 DataContract()>  _
	Partial Public Class BUSINESS_TYPE_2
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE2_ID As String
		
		Private _RESEARCH_CODE As String
		
		Private _DESCRIPTION As String
		
		Private _DESCRIPTION_EN As String
		
		Private _TYPE1_ID As String
		
		Private _NOTE As Char
		
		Private _PRIORITY As Integer
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSINESS_TYPE_1s As EntitySet(Of BUSINESS_TYPE_1)
		
		Private _BUSINESS_TYPE_3 As EntityRef(Of BUSINESS_TYPE_3)
		
		Private serializing As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE2_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE2_IDChanged()
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanged()
    End Sub
    Partial Private Sub OnTYPE1_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE1_IDChanged()
    End Sub
    Partial Private Sub OnNOTEChanging(value As Char)
    End Sub
    Partial Private Sub OnNOTEChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE2_ID", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE2_ID() As String
			Get
				Return Me._TYPE2_ID
			End Get
			Set
				If (String.Equals(Me._TYPE2_ID, value) = false) Then
					If Me._BUSINESS_TYPE_3.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnTYPE2_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE2_ID = value
					Me.SendPropertyChanged("TYPE2_ID")
					Me.OnTYPE2_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_RESEARCH_CODE", DbType:="VarChar(8) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property RESEARCH_CODE() As String
			Get
				Return Me._RESEARCH_CODE
			End Get
			Set
				If (String.Equals(Me._RESEARCH_CODE, value) = false) Then
					Me.OnRESEARCH_CODEChanging(value)
					Me.SendPropertyChanging
					Me._RESEARCH_CODE = value
					Me.SendPropertyChanged("RESEARCH_CODE")
					Me.OnRESEARCH_CODEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=3)>  _
		Public Property DESCRIPTION() As String
			Get
				Return Me._DESCRIPTION
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION, value) = false) Then
					Me.OnDESCRIPTIONChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION = value
					Me.SendPropertyChanged("DESCRIPTION")
					Me.OnDESCRIPTIONChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION_EN", DbType:="VarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=4)>  _
		Public Property DESCRIPTION_EN() As String
			Get
				Return Me._DESCRIPTION_EN
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION_EN, value) = false) Then
					Me.OnDESCRIPTION_ENChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION_EN = value
					Me.SendPropertyChanged("DESCRIPTION_EN")
					Me.OnDESCRIPTION_ENChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE1_ID", DbType:="VarChar(2) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=5)>  _
		Public Property TYPE1_ID() As String
			Get
				Return Me._TYPE1_ID
			End Get
			Set
				If (String.Equals(Me._TYPE1_ID, value) = false) Then
					Me.OnTYPE1_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE1_ID = value
					Me.SendPropertyChanged("TYPE1_ID")
					Me.OnTYPE1_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_NOTE", DbType:="Char(1) NOT NULL"),  _
		 DataMember(Order:=6)>  _
		Public Property NOTE() As Char
			Get
				Return Me._NOTE
			End Get
			Set
				If ((Me._NOTE = value)  _
							= false) Then
					Me.OnNOTEChanging(value)
					Me.SendPropertyChanging
					Me._NOTE = value
					Me.SendPropertyChanged("NOTE")
					Me.OnNOTEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=7)>  _
		Public Property PRIORITY() As Integer
			Get
				Return Me._PRIORITY
			End Get
			Set
				If ((Me._PRIORITY = value)  _
							= false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=8)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=9)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSINESS_TYPE_2_BUSINESS_TYPE_1", Storage:="_BUSINESS_TYPE_1s", ThisKey:="TYPE1_ID", OtherKey:="TYPE1_ID"),  _
		 DataMember(Order:=10, EmitDefaultValue:=false)>  _
		Public Property BUSINESS_TYPE_1s() As EntitySet(Of BUSINESS_TYPE_1)
			Get
				If (Me.serializing  _
							AndAlso (Me._BUSINESS_TYPE_1s.HasLoadedOrAssignedValues = false)) Then
					Return Nothing
				End If
				Return Me._BUSINESS_TYPE_1s
			End Get
			Set
				Me._BUSINESS_TYPE_1s.Assign(value)
			End Set
		End Property
		
		<Association(Name:="BUSINESS_TYPE_3_BUSINESS_TYPE_2", Storage:="_BUSINESS_TYPE_3", ThisKey:="TYPE2_ID", OtherKey:="TYPE2_ID", IsForeignKey:=true)>  _
		Public Property BUSINESS_TYPE_3() As BUSINESS_TYPE_3
			Get
				Return Me._BUSINESS_TYPE_3.Entity
			End Get
			Set
				Dim previousValue As BUSINESS_TYPE_3 = Me._BUSINESS_TYPE_3.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BUSINESS_TYPE_3.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BUSINESS_TYPE_3.Entity = Nothing
						previousValue.BUSINESS_TYPE_2s.Remove(Me)
					End If
					Me._BUSINESS_TYPE_3.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BUSINESS_TYPE_2s.Add(Me)
						Me._TYPE2_ID = value.TYPE2_ID
					Else
						Me._TYPE2_ID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("BUSINESS_TYPE_3")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_BUSINESS_TYPE_1s(ByVal entity As BUSINESS_TYPE_1)
			Me.SendPropertyChanging
			entity.BUSINESS_TYPE_2 = Me
		End Sub
		
		Private Sub detach_BUSINESS_TYPE_1s(ByVal entity As BUSINESS_TYPE_1)
			Me.SendPropertyChanging
			entity.BUSINESS_TYPE_2 = Nothing
		End Sub
		
		Private Sub Initialize()
			Me._BUSINESS_TYPE_1s = New EntitySet(Of BUSINESS_TYPE_1)(AddressOf Me.attach_BUSINESS_TYPE_1s, AddressOf Me.detach_BUSINESS_TYPE_1s)
			Me._BUSINESS_TYPE_3 = CType(Nothing, EntityRef(Of BUSINESS_TYPE_3))
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
		
		<OnSerializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerializing(ByVal context As StreamingContext)
			Me.serializing = true
		End Sub
		
		<OnSerialized(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerialized(ByVal context As StreamingContext)
			Me.serializing = false
		End Sub
	End Class
	
	<Table(Name:="dbo.BUSINESS_TYPE_3"),  _
	 DataContract()>  _
	Partial Public Class BUSINESS_TYPE_3
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE3_ID As String
		
		Private _RESEARCH_CODE As String
		
		Private _DESCRIPTION As String
		
		Private _DESCRIPTION_EN As String
		
		Private _TYPE2_ID As String
		
		Private _NOTE As System.Nullable(Of Char)
		
		Private _PRIORITY As Integer
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSINESS_TYPE_2s As EntitySet(Of BUSINESS_TYPE_2)
		
		Private _BUSINESS_TYPE_4 As EntityRef(Of BUSINESS_TYPE_4)
		
		Private serializing As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE3_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE3_IDChanged()
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanged()
    End Sub
    Partial Private Sub OnTYPE2_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE2_IDChanged()
    End Sub
    Partial Private Sub OnNOTEChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnNOTEChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As Integer)
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE3_ID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE3_ID() As String
			Get
				Return Me._TYPE3_ID
			End Get
			Set
				If (String.Equals(Me._TYPE3_ID, value) = false) Then
					If Me._BUSINESS_TYPE_4.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnTYPE3_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE3_ID = value
					Me.SendPropertyChanged("TYPE3_ID")
					Me.OnTYPE3_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_RESEARCH_CODE", DbType:="VarChar(8) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property RESEARCH_CODE() As String
			Get
				Return Me._RESEARCH_CODE
			End Get
			Set
				If (String.Equals(Me._RESEARCH_CODE, value) = false) Then
					Me.OnRESEARCH_CODEChanging(value)
					Me.SendPropertyChanging
					Me._RESEARCH_CODE = value
					Me.SendPropertyChanged("RESEARCH_CODE")
					Me.OnRESEARCH_CODEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=3)>  _
		Public Property DESCRIPTION() As String
			Get
				Return Me._DESCRIPTION
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION, value) = false) Then
					Me.OnDESCRIPTIONChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION = value
					Me.SendPropertyChanged("DESCRIPTION")
					Me.OnDESCRIPTIONChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION_EN", DbType:="VarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=4)>  _
		Public Property DESCRIPTION_EN() As String
			Get
				Return Me._DESCRIPTION_EN
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION_EN, value) = false) Then
					Me.OnDESCRIPTION_ENChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION_EN = value
					Me.SendPropertyChanged("DESCRIPTION_EN")
					Me.OnDESCRIPTION_ENChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE2_ID", DbType:="VarChar(4) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=5)>  _
		Public Property TYPE2_ID() As String
			Get
				Return Me._TYPE2_ID
			End Get
			Set
				If (String.Equals(Me._TYPE2_ID, value) = false) Then
					Me.OnTYPE2_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE2_ID = value
					Me.SendPropertyChanged("TYPE2_ID")
					Me.OnTYPE2_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_NOTE", DbType:="Char(1)"),  _
		 DataMember(Order:=6)>  _
		Public Property NOTE() As System.Nullable(Of Char)
			Get
				Return Me._NOTE
			End Get
			Set
				If (Me._NOTE.Equals(value) = false) Then
					Me.OnNOTEChanging(value)
					Me.SendPropertyChanging
					Me._NOTE = value
					Me.SendPropertyChanged("NOTE")
					Me.OnNOTEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int NOT NULL"),  _
		 DataMember(Order:=7)>  _
		Public Property PRIORITY() As Integer
			Get
				Return Me._PRIORITY
			End Get
			Set
				If ((Me._PRIORITY = value)  _
							= false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=8)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=9)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSINESS_TYPE_3_BUSINESS_TYPE_2", Storage:="_BUSINESS_TYPE_2s", ThisKey:="TYPE2_ID", OtherKey:="TYPE2_ID"),  _
		 DataMember(Order:=10, EmitDefaultValue:=false)>  _
		Public Property BUSINESS_TYPE_2s() As EntitySet(Of BUSINESS_TYPE_2)
			Get
				If (Me.serializing  _
							AndAlso (Me._BUSINESS_TYPE_2s.HasLoadedOrAssignedValues = false)) Then
					Return Nothing
				End If
				Return Me._BUSINESS_TYPE_2s
			End Get
			Set
				Me._BUSINESS_TYPE_2s.Assign(value)
			End Set
		End Property
		
		<Association(Name:="BUSINESS_TYPE_4_BUSINESS_TYPE_3", Storage:="_BUSINESS_TYPE_4", ThisKey:="TYPE3_ID", OtherKey:="TYPE3_ID", IsForeignKey:=true)>  _
		Public Property BUSINESS_TYPE_4() As BUSINESS_TYPE_4
			Get
				Return Me._BUSINESS_TYPE_4.Entity
			End Get
			Set
				Dim previousValue As BUSINESS_TYPE_4 = Me._BUSINESS_TYPE_4.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BUSINESS_TYPE_4.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BUSINESS_TYPE_4.Entity = Nothing
						previousValue.BUSINESS_TYPE_3s.Remove(Me)
					End If
					Me._BUSINESS_TYPE_4.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BUSINESS_TYPE_3s.Add(Me)
						Me._TYPE3_ID = value.TYPE3_ID
					Else
						Me._TYPE3_ID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("BUSINESS_TYPE_4")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_BUSINESS_TYPE_2s(ByVal entity As BUSINESS_TYPE_2)
			Me.SendPropertyChanging
			entity.BUSINESS_TYPE_3 = Me
		End Sub
		
		Private Sub detach_BUSINESS_TYPE_2s(ByVal entity As BUSINESS_TYPE_2)
			Me.SendPropertyChanging
			entity.BUSINESS_TYPE_3 = Nothing
		End Sub
		
		Private Sub Initialize()
			Me._BUSINESS_TYPE_2s = New EntitySet(Of BUSINESS_TYPE_2)(AddressOf Me.attach_BUSINESS_TYPE_2s, AddressOf Me.detach_BUSINESS_TYPE_2s)
			Me._BUSINESS_TYPE_4 = CType(Nothing, EntityRef(Of BUSINESS_TYPE_4))
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
		
		<OnSerializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerializing(ByVal context As StreamingContext)
			Me.serializing = true
		End Sub
		
		<OnSerialized(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerialized(ByVal context As StreamingContext)
			Me.serializing = false
		End Sub
	End Class
	
	<Table(Name:="dbo.BUSINESS_TYPE_4"),  _
	 DataContract()>  _
	Partial Public Class BUSINESS_TYPE_4
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TYPE4_ID As String
		
		Private _RESEARCH_CODE As String
		
		Private _DESCRIPTION As String
		
		Private _DESCRIPTION_EN As String
		
		Private _TYPE3_ID As String
		
		Private _NOTE As System.Nullable(Of Char)
		
		Private _PRIORITY As System.Nullable(Of Integer)
		
		Private _UPDATE_BY As String
		
		Private _UPDATE_DATE As Date
		
		Private _BUSINESS_TYPE_3s As EntitySet(Of BUSINESS_TYPE_3)
		
		Private serializing As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTYPE4_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE4_IDChanged()
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnRESEARCH_CODEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTION_ENChanged()
    End Sub
    Partial Private Sub OnTYPE3_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE3_IDChanged()
    End Sub
    Partial Private Sub OnNOTEChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnNOTEChanged()
    End Sub
    Partial Private Sub OnPRIORITYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPRIORITYChanged()
    End Sub
    Partial Private Sub OnUPDATE_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_BYChanged()
    End Sub
    Partial Private Sub OnUPDATE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnUPDATE_DATEChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_TYPE4_ID", DbType:="VarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
		 DataMember(Order:=1)>  _
		Public Property TYPE4_ID() As String
			Get
				Return Me._TYPE4_ID
			End Get
			Set
				If (String.Equals(Me._TYPE4_ID, value) = false) Then
					Me.OnTYPE4_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE4_ID = value
					Me.SendPropertyChanged("TYPE4_ID")
					Me.OnTYPE4_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_RESEARCH_CODE", DbType:="VarChar(8) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=2)>  _
		Public Property RESEARCH_CODE() As String
			Get
				Return Me._RESEARCH_CODE
			End Get
			Set
				If (String.Equals(Me._RESEARCH_CODE, value) = false) Then
					Me.OnRESEARCH_CODEChanging(value)
					Me.SendPropertyChanging
					Me._RESEARCH_CODE = value
					Me.SendPropertyChanged("RESEARCH_CODE")
					Me.OnRESEARCH_CODEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=3)>  _
		Public Property DESCRIPTION() As String
			Get
				Return Me._DESCRIPTION
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION, value) = false) Then
					Me.OnDESCRIPTIONChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION = value
					Me.SendPropertyChanged("DESCRIPTION")
					Me.OnDESCRIPTIONChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DESCRIPTION_EN", DbType:="VarChar(255) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=4)>  _
		Public Property DESCRIPTION_EN() As String
			Get
				Return Me._DESCRIPTION_EN
			End Get
			Set
				If (String.Equals(Me._DESCRIPTION_EN, value) = false) Then
					Me.OnDESCRIPTION_ENChanging(value)
					Me.SendPropertyChanging
					Me._DESCRIPTION_EN = value
					Me.SendPropertyChanged("DESCRIPTION_EN")
					Me.OnDESCRIPTION_ENChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TYPE3_ID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false),  _
		 DataMember(Order:=5)>  _
		Public Property TYPE3_ID() As String
			Get
				Return Me._TYPE3_ID
			End Get
			Set
				If (String.Equals(Me._TYPE3_ID, value) = false) Then
					Me.OnTYPE3_IDChanging(value)
					Me.SendPropertyChanging
					Me._TYPE3_ID = value
					Me.SendPropertyChanged("TYPE3_ID")
					Me.OnTYPE3_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_NOTE", DbType:="Char(1)"),  _
		 DataMember(Order:=6)>  _
		Public Property NOTE() As System.Nullable(Of Char)
			Get
				Return Me._NOTE
			End Get
			Set
				If (Me._NOTE.Equals(value) = false) Then
					Me.OnNOTEChanging(value)
					Me.SendPropertyChanging
					Me._NOTE = value
					Me.SendPropertyChanged("NOTE")
					Me.OnNOTEChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PRIORITY", DbType:="Int"),  _
		 DataMember(Order:=7)>  _
		Public Property PRIORITY() As System.Nullable(Of Integer)
			Get
				Return Me._PRIORITY
			End Get
			Set
				If (Me._PRIORITY.Equals(value) = false) Then
					Me.OnPRIORITYChanging(value)
					Me.SendPropertyChanging
					Me._PRIORITY = value
					Me.SendPropertyChanged("PRIORITY")
					Me.OnPRIORITYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_BY", DbType:="NVarChar(10)"),  _
		 DataMember(Order:=8)>  _
		Public Property UPDATE_BY() As String
			Get
				Return Me._UPDATE_BY
			End Get
			Set
				If (String.Equals(Me._UPDATE_BY, value) = false) Then
					Me.OnUPDATE_BYChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_BY = value
					Me.SendPropertyChanged("UPDATE_BY")
					Me.OnUPDATE_BYChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_UPDATE_DATE", DbType:="DateTime NOT NULL"),  _
		 DataMember(Order:=9)>  _
		Public Property UPDATE_DATE() As Date
			Get
				Return Me._UPDATE_DATE
			End Get
			Set
				If ((Me._UPDATE_DATE = value)  _
							= false) Then
					Me.OnUPDATE_DATEChanging(value)
					Me.SendPropertyChanging
					Me._UPDATE_DATE = value
					Me.SendPropertyChanged("UPDATE_DATE")
					Me.OnUPDATE_DATEChanged
				End If
			End Set
		End Property
		
		<Association(Name:="BUSINESS_TYPE_4_BUSINESS_TYPE_3", Storage:="_BUSINESS_TYPE_3s", ThisKey:="TYPE3_ID", OtherKey:="TYPE3_ID"),  _
		 DataMember(Order:=10, EmitDefaultValue:=false)>  _
		Public Property BUSINESS_TYPE_3s() As EntitySet(Of BUSINESS_TYPE_3)
			Get
				If (Me.serializing  _
							AndAlso (Me._BUSINESS_TYPE_3s.HasLoadedOrAssignedValues = false)) Then
					Return Nothing
				End If
				Return Me._BUSINESS_TYPE_3s
			End Get
			Set
				Me._BUSINESS_TYPE_3s.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_BUSINESS_TYPE_3s(ByVal entity As BUSINESS_TYPE_3)
			Me.SendPropertyChanging
			entity.BUSINESS_TYPE_4 = Me
		End Sub
		
		Private Sub detach_BUSINESS_TYPE_3s(ByVal entity As BUSINESS_TYPE_3)
			Me.SendPropertyChanging
			entity.BUSINESS_TYPE_4 = Nothing
		End Sub
		
		Private Sub Initialize()
			Me._BUSINESS_TYPE_3s = New EntitySet(Of BUSINESS_TYPE_3)(AddressOf Me.attach_BUSINESS_TYPE_3s, AddressOf Me.detach_BUSINESS_TYPE_3s)
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
		
		<OnSerializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerializing(ByVal context As StreamingContext)
			Me.serializing = true
		End Sub
		
		<OnSerialized(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnSerialized(ByVal context As StreamingContext)
			Me.serializing = false
		End Sub
	End Class
End Namespace
