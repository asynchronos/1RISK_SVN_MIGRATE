'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization

Namespace util.log
	
	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="Bay01_test")>  _
	Partial Public Class LogDataClassesDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertLOG_TABLE(instance As LOG_TABLE)
    End Sub
    Partial Private Sub UpdateLOG_TABLE(instance As LOG_TABLE)
    End Sub
    Partial Private Sub DeleteLOG_TABLE(instance As LOG_TABLE)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BAY01ConnectionString").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property LOG_TABLEs() As System.Data.Linq.Table(Of LOG_TABLE)
			Get
				Return Me.GetTable(Of LOG_TABLE)
			End Get
		End Property
	End Class
	
	<Table(Name:="dbo.LOG_TABLE"),  _
	 DataContract()>  _
	Partial Public Class LOG_TABLE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _IP_ADDRESS As String
		
		Private _LOG_TYPE_ID As String
		
		Private _LOG_LEVEL_ID As String
		
		Private _EMP_ID As String
		
		Private _URL As String
		
		Private _DETAIL As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIP_ADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnIP_ADDRESSChanged()
    End Sub
    Partial Private Sub OnLOG_TYPE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnLOG_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnLOG_LEVEL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnLOG_LEVEL_IDChanged()
    End Sub
    Partial Private Sub OnEMP_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMP_IDChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnDETAILChanging(value As String)
    End Sub
    Partial Private Sub OnDETAILChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me.Initialize
		End Sub
		
		<Column(Storage:="_IP_ADDRESS", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never),  _
		 DataMember(Order:=1)>  _
		Public Property IP_ADDRESS() As String
			Get
				Return Me._IP_ADDRESS
			End Get
			Set
				If (String.Equals(Me._IP_ADDRESS, value) = false) Then
					Me.OnIP_ADDRESSChanging(value)
					Me.SendPropertyChanging
					Me._IP_ADDRESS = value
					Me.SendPropertyChanged("IP_ADDRESS")
					Me.OnIP_ADDRESSChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_LOG_TYPE_ID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never),  _
		 DataMember(Order:=2)>  _
		Public Property LOG_TYPE_ID() As String
			Get
				Return Me._LOG_TYPE_ID
			End Get
			Set
				If (String.Equals(Me._LOG_TYPE_ID, value) = false) Then
					Me.OnLOG_TYPE_IDChanging(value)
					Me.SendPropertyChanging
					Me._LOG_TYPE_ID = value
					Me.SendPropertyChanged("LOG_TYPE_ID")
					Me.OnLOG_TYPE_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_LOG_LEVEL_ID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
		 DataMember(Order:=3)>  _
		Public Property LOG_LEVEL_ID() As String
			Get
				Return Me._LOG_LEVEL_ID
			End Get
			Set
				If (String.Equals(Me._LOG_LEVEL_ID, value) = false) Then
					Me.OnLOG_LEVEL_IDChanging(value)
					Me.SendPropertyChanging
					Me._LOG_LEVEL_ID = value
					Me.SendPropertyChanged("LOG_LEVEL_ID")
					Me.OnLOG_LEVEL_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_EMP_ID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
		 DataMember(Order:=4)>  _
		Public Property EMP_ID() As String
			Get
				Return Me._EMP_ID
			End Get
			Set
				If (String.Equals(Me._EMP_ID, value) = false) Then
					Me.OnEMP_IDChanging(value)
					Me.SendPropertyChanging
					Me._EMP_ID = value
					Me.SendPropertyChanged("EMP_ID")
					Me.OnEMP_IDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_URL", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
		 DataMember(Order:=5)>  _
		Public Property URL() As String
			Get
				Return Me._URL
			End Get
			Set
				If (String.Equals(Me._URL, value) = false) Then
					Me.OnURLChanging(value)
					Me.SendPropertyChanging
					Me._URL = value
					Me.SendPropertyChanged("URL")
					Me.OnURLChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_DETAIL", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
		 DataMember(Order:=6)>  _
		Public Property DETAIL() As String
			Get
				Return Me._DETAIL
			End Get
			Set
				If (String.Equals(Me._DETAIL, value) = false) Then
					Me.OnDETAILChanging(value)
					Me.SendPropertyChanging
					Me._DETAIL = value
					Me.SendPropertyChanged("DETAIL")
					Me.OnDETAILChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub Initialize()
			OnCreated
		End Sub
		
		<OnDeserializing(),  _
		 System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
		Public Sub OnDeserializing(ByVal context As StreamingContext)
			Me.Initialize
		End Sub
	End Class
End Namespace
